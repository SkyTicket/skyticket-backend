// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  BUYER
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  password    String
  email       String        @unique
  role        Role          @default(BUYER)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  transactions Transaction[]
  passengers  Passenger[]   // Relasi ke passenger
}

model Ticket {
  id            Int          @id @default(autoincrement())
  flight_code   String
  price         Float
  availability  Boolean      @default(true)
  available_seats Int 
  date          DateTime
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  transactions  Transaction[]
  passengers    Passenger[] 
  seats         Seat[]       // Relasi ke kursi
}

model Passenger {
  id            Int      @id @default(autoincrement())
  name          String
  passport_no   String
  nationality   String
  user_id       Int
  user          User     @relation(fields: [user_id], references: [id])
  ticket_id     Int
  ticket        Ticket   @relation(fields: [ticket_id], references: [id])
}
model Seat {
  id          Int       @id @default(autoincrement())
  seat_number String    // Misalnya A1, A2, B1, dst.
  available   Boolean   @default(true)
  ticket_id   Int
  ticket      Ticket    @relation(fields: [ticket_id], references: [id])
}

model Transaction {
  id               Int            @id @default(autoincrement())
  user_id          Int
  ticket_id        Int
  amount           Float
  payment_status   PaymentStatus  @default(PENDING)
  transaction_date DateTime       @default(now())
  payment_method   String
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  user   User   @relation(fields: [user_id], references: [id])
  ticket Ticket @relation(fields: [ticket_id], references: [id])
}
