// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id String @id @default(uuid())
  user_name String
  user_email String @unique
  user_password String
  user_role UserRole
  user_phone String
  Bookers Bookers[] // new
  notifications Notifications[]
  passwordResetTokens Password_reset_tokens[]
}

model Password_reset_tokens {
  id String @id @default(uuid())
  token String @unique
  user_id String
  created_at DateTime @default(now())
  user Users @relation(fields: [user_id], references: [user_id])
}

model Notifications {
  notification_id String @id @default(uuid())
  user_id String
  notification_type NotificationType
  notification_message String
  notification_is_read Boolean
  notification_created_at DateTime @default(now())
  user Users @relation(fields: [user_id], references: [user_id])
}

model Bookers { // new
  booker_id String @id @default(uuid())
  user_id String
  booker_name String
  booker_email String
  booker_phone String
  user Users @relation(fields: [user_id], references: [user_id])
  bookings Bookings[]
}

model Passengers {
  passenger_id String @id @default(uuid())
  booking_id String
  passenger_name String
  passenger_type PassengerType
  booking Bookings @relation(fields: [booking_id], references: [booking_id])
}

model Bookings {
  booking_id String @id @default(uuid())
  booker_id String
  booking_date DateTime @default(now())
  booking_amount Decimal @db.Decimal(15, 2)
  booking_code String
  booking_payment_status PaymentStatus
  booking_payment_method PaymentMethod
  booker Bookers @relation(fields: [booker_id], references: [booker_id])
  passengers Passengers[]
  booking_details Booking_details[]
  tickets Tickets[]
}

model Booking_details {
  booking_detail_id String @id @default(uuid())
  booking_id String
  ticket_id String
  transaction_detail_quantity Int
  booking Bookings @relation(fields: [booking_id], references: [booking_id])
  ticket Tickets @relation(fields: [ticket_id], references: [ticket_id])
}

model Tickets {
  ticket_id String @id @default(uuid())
  flight_id String
  booking_id String
  aircraft_seat_id String @unique
  ticket_status TicketStatus
  ticket_qr String
  flight Flights @relation(fields: [flight_id], references: [flight_id])
  booking Bookings @relation(fields: [booking_id], references: [booking_id])
  aircraft_seat Aircraft_seats? @relation(fields: [aircraft_seat_id], references: [aircraft_seat_id]) // Kalau mungkin ada tiket tanpa seat (contoh tiket hold tanpa assign seat langsung), bisa jadi optional
  booking_details Booking_details[]
}

model Airports {
  airport_id String @id @default(uuid())
  airport_name String
  airport_code String @unique @db.Char(3)
  airport_country String
  airport_city String
  Airport_city_image String
  airport_time_zone String // Asia/Jakarta, Asia/Singapore, etc
  flights_departure Flights[] @relation("FlightDeparture")
  flights_arrival Flights[] @relation("FlightArrival")
}

model Seat_classes {
  seat_class_id String @id @default(uuid())
  seat_class_type SeatClass
  flight_seat_classes Flight_seat_classes[]
}

model Flight_seat_classes {
  flight_seat_class_id String @id @default(uuid())
  seat_class_id String
  flight_id String
  seat_class_price Decimal @db.Decimal(15, 2)
  seat_class_capacity Int
  seat_class Seat_classes @relation(fields: [seat_class_id], references: [seat_class_id])
  flight Flights @relation(fields: [flight_id], references: [flight_id])
}

model Flights {
  flight_id String @id @default(uuid())
  airline_id String
  flight_departure_airport_id String
  flight_arrival_airport_id String
  aircraft_id String // new
  flight_departure_date DateTime
  flight_arrival_date DateTime
  // flight_price Float
  // flight_available_seats Int
  flight_number String
  airline Airlines @relation(fields: [airline_id], references: [airline_id])
  departure_airport Airports @relation("FlightDeparture",fields: [flight_departure_airport_id], references: [airport_id])
  aircraft Aircrafts @relation(fields: [aircraft_id], references: [aircraft_id])
  arrival_airport Airports @relation("FlightArrival",fields: [flight_arrival_airport_id], references: [airport_id])
  flight_seat_classes Flight_seat_classes[]
  tickets Tickets[]
}

model Airlines {
  airline_id String @id @default(uuid())
  airline_name String
  airline_code String
  Airline_logo String
  flights Flights[]
}

model Aircrafts {
  aircraft_id String @id @default(uuid())
  aircraft_manufacturer String
  aircraft_type String @db.Char(5)
  flights Flights[]
  aircraft_seats Aircraft_seats[]
}

model Aircraft_seats {
  aircraft_seat_id String @id @default(uuid())
  aircraft_id String
  aircraft_seat_position String @db.Char(3)
  aircraft Aircrafts @relation(fields: [aircraft_id], references: [aircraft_id])
  Ticket Tickets?
}

enum UserRole {
  buyer
  admin
}

enum PassengerType {
  Infant
  Child
  Adult
}

enum NotificationType {
  PROMO
  SCHEDULE_CHANGE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
}

enum TicketStatus {
  BOOKED
  CONFIRMED
  CANCELLED
}

enum SeatClass {
  Economy
  PremiumEconomy
  Business
  FirstClass
}