// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id String @id @default(uuid())
  user_name String
  user_email String @unique
  user_password String
  user_role UserRole @default(buyer)
  user_phone String
  user_is_active UserStatus @default(unverified) // Enum untuk status verifikasi
  Bookers Bookers[] // new
  notifications Notifications[]
  passwordResetTokens Password_reset_tokens[]
  bookings Bookings[]

  otps                 Otp[]                // Relasi ke tabel Otp
}

model Otp {
  otp_id            String   @id @default(uuid())       // Primary Key
  user_id           String   @unique                   // Foreign Key
  otp_code          String                              // OTP yang di-hash
  otp_expires_at    DateTime                           // Tanggal kedaluwarsa OTP
  otp_is_used       Boolean  @default(false)           // Status OTP
  otp_request_count Int      @default(0)               // Jumlah permintaan resend OTP
  otp_request_reset_at DateTime?                       // Waktu reset hitungan permintaan resend OTP
  last_otp_requested_at DateTime?                      // Waktu permintaan OTP terakhir
  user              Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}


model Password_reset_tokens {
  id String @id @default(uuid())
  token String @unique
  user_id String
  created_at DateTime @default(now())
  user Users @relation(fields: [user_id], references: [user_id])
}

model Notifications {
  notification_id String @id @default(uuid())
  user_id String
  notification_type NotificationType
  notification_message String
  notification_is_read Boolean
  notification_created_at DateTime @default(now())
  user Users @relation(fields: [user_id], references: [user_id])
}

model Bookers { // new
  booker_id String @id @default(uuid())
  user_id String
  booker_name String
  booker_email String
  booker_phone String
  user Users @relation(fields: [user_id], references: [user_id])
  passangers Passengers[]
}
model Passengers {
  passenger_id String @id @default(uuid())
  title Title @default(Mr) // Default to 'Mr' for title
  name String @default("Unknown") // Default value for name
  familyName String? // Nullable
  dateOfBirth DateTime @default(now()) // Default to the current date
  nationality String @default("Unknown") // Default value for nationality
  identityNumber String @default("Unknown") // Default value
  issuingCountry String @default("Unknown") // Default value
  bookers_id String @default("Unknown")
  category   PassengerCategory  @default(Adult)
  validUntil DateTime?
  deleteAt DateTime?
  Tickets Tickets[]
  booker Bookers @relation(fields: [bookers_id], references: [booker_id])
}


model Bookings {
  booking_id String @id @default(uuid())
  booking_date DateTime @default(now())
  booking_amount Decimal @db.Decimal(15, 2)
  booking_code String @unique
  user_id String
  tax Decimal @db.Decimal(10, 2) @default(0.00) 
  booking_payment_status PaymentStatus
  booking_payment_method String?
  tickets Tickets[]
 
  user Users @relation(fields: [user_id], references: [user_id])
}


model Tickets {
  ticket_id String @id @default(uuid())
  booking_id String
  passenger_id String 
  flight_seat_assigment_id Int
  category PassengerCategory  @default(Adult)
  passanger Passengers @relation(fields: [passenger_id], references: [passenger_id])
  flight_seat_assigment Flight_seat_assignments @relation(fields: [flight_seat_assigment_id], references: [id])
  booking Bookings @relation(fields: [booking_id], references: [booking_id])
}

model Airports {
  airport_id String @id @default(uuid())
  airport_name String
  airport_code String @unique @db.Char(3)
  airport_continent Continents?
  airport_country String
  airport_city String
  Airport_city_image String
  airport_time_zone String // Asia/Jakarta, Asia/Singapore, etc
  flights_departure Flights[] @relation("FlightDeparture")
  flights_arrival Flights[] @relation("FlightArrival")
}

model Seat_classes {
  seat_class_id String @id @default(uuid())
  seat_class_type SeatClass
  flight_seat_classes Flight_seat_classes[]
}

model Flight_seat_classes {
  flight_seat_class_id String @id @default(uuid())
  seat_class_id String
  flight_id String
  seat_class_price Decimal @db.Decimal(15, 2)
  seat_class_capacity Int
  seat_class Seat_classes @relation(fields: [seat_class_id], references: [seat_class_id])
  flight Flights @relation(fields: [flight_id], references: [flight_id])

  seats                Flight_seat_assignments[] // Relasi many-to-many ke Seats
}
model Flight_seat_assignments {
  id                     Int   @id @default(autoincrement())// ID unik untuk hubungan ini
  seat_id                Int      // FK ke Seats
  flight_seat_class_id   String   // FK ke Flight_seat_classes
  available              Boolean  @default(true) // Status ketersediaan kursi
  seat                   Seat     @relation(fields: [seat_id], references: [id])
  flight_seat_class      Flight_seat_classes @relation(fields: [flight_seat_class_id], references: [flight_seat_class_id])
  tickets Tickets[]
}

model Seat {

  id          Int   @id @default(autoincrement()) // ID unik kursi
  seat_number String // Nomor kursi (misalnya: "12A", "12B")
  seat_classes Flight_seat_assignments[] // Relasi many-to-many dengan Flight_seat_classes
}

model Flights {
  flight_id String @id @default(uuid())
  airline_id String
  flight_departure_airport_id String
  flight_arrival_airport_id String
  aircraft_id String // new
  flight_departure_date DateTime
  flight_arrival_date DateTime
  flight_number String
  airline Airlines @relation(fields: [airline_id], references: [airline_id])
  departure_airport Airports @relation("FlightDeparture",fields: [flight_departure_airport_id], references: [airport_id])
  aircraft Aircrafts @relation(fields: [aircraft_id], references: [aircraft_id])
  arrival_airport Airports @relation("FlightArrival",fields: [flight_arrival_airport_id], references: [airport_id])
  flight_seat_classes Flight_seat_classes[]
}

model Airlines {
  airline_id String @id @default(uuid())
  airline_name String
  airline_code String
  Airline_logo String
  flights Flights[]
}

model Aircrafts {
  aircraft_id String @id @default(uuid())
  aircraft_manufacturer String
  aircraft_type String @db.Char(5)
  flights Flights[]
  aircraft_seats Aircraft_seats[]
}

model Aircraft_seats {
  aircraft_seat_id String @id @default(uuid())
  aircraft_id String
  aircraft_seat_position String @db.Char(3)
  aircraft Aircrafts @relation(fields: [aircraft_id], references: [aircraft_id])


}

model TokenBlacklist {
  id String @id @default(uuid())
  token String  @unique
  createdAt DateTime @default(now())
  expiredAt DateTime

}

enum UserRole {
  buyer
  admin
}

enum Continents {
  Asia
  Amerika
  Australia
  Eropa
  Afrika
}

enum PassengerCategory {
  Adult
  Child
  Baby
}
enum Title {
  Mr
  Mrs
}

enum NotificationType {
  PROMO
  SCHEDULE_CHANGE
}

enum PaymentStatus {
  Issued
  Unpaid
  Cancelled
}

enum SeatClass {
  Economy
  PremiumEconomy
  Business
  FirstClass
}

enum UserStatus {
  unverified
  verified
}